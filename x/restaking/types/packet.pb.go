// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: empyrean/restaking/packet.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/lightmos/restaking/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RestakingPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*RestakingPacketData_NoData
	//	*RestakingPacketData_SellOrderPacket
	//	*RestakingPacketData_BuyOrderPacket
	//	*RestakingPacketData_RestakePacket
	//	*RestakingPacketData_UndelegatePacket
	//	*RestakingPacketData_RetireSharePacket
	Packet isRestakingPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *RestakingPacketData) Reset()         { *m = RestakingPacketData{} }
func (m *RestakingPacketData) String() string { return proto.CompactTextString(m) }
func (*RestakingPacketData) ProtoMessage()    {}
func (*RestakingPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{0}
}
func (m *RestakingPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestakingPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestakingPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestakingPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestakingPacketData.Merge(m, src)
}
func (m *RestakingPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RestakingPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RestakingPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RestakingPacketData proto.InternalMessageInfo

type isRestakingPacketData_Packet interface {
	isRestakingPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RestakingPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type RestakingPacketData_SellOrderPacket struct {
	SellOrderPacket *SellOrderPacketData `protobuf:"bytes,2,opt,name=sellOrderPacket,proto3,oneof" json:"sellOrderPacket,omitempty"`
}
type RestakingPacketData_BuyOrderPacket struct {
	BuyOrderPacket *BuyOrderPacketData `protobuf:"bytes,3,opt,name=buyOrderPacket,proto3,oneof" json:"buyOrderPacket,omitempty"`
}
type RestakingPacketData_RestakePacket struct {
	RestakePacket *RestakePacketData `protobuf:"bytes,4,opt,name=restakePacket,proto3,oneof" json:"restakePacket,omitempty"`
}
type RestakingPacketData_UndelegatePacket struct {
	UndelegatePacket *UndelegatePacketData `protobuf:"bytes,5,opt,name=undelegatePacket,proto3,oneof" json:"undelegatePacket,omitempty"`
}
type RestakingPacketData_RetireSharePacket struct {
	RetireSharePacket *RetireSharePacketData `protobuf:"bytes,6,opt,name=retireSharePacket,proto3,oneof" json:"retireSharePacket,omitempty"`
}

func (*RestakingPacketData_NoData) isRestakingPacketData_Packet()            {}
func (*RestakingPacketData_SellOrderPacket) isRestakingPacketData_Packet()   {}
func (*RestakingPacketData_BuyOrderPacket) isRestakingPacketData_Packet()    {}
func (*RestakingPacketData_RestakePacket) isRestakingPacketData_Packet()     {}
func (*RestakingPacketData_UndelegatePacket) isRestakingPacketData_Packet()  {}
func (*RestakingPacketData_RetireSharePacket) isRestakingPacketData_Packet() {}

func (m *RestakingPacketData) GetPacket() isRestakingPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *RestakingPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*RestakingPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *RestakingPacketData) GetSellOrderPacket() *SellOrderPacketData {
	if x, ok := m.GetPacket().(*RestakingPacketData_SellOrderPacket); ok {
		return x.SellOrderPacket
	}
	return nil
}

func (m *RestakingPacketData) GetBuyOrderPacket() *BuyOrderPacketData {
	if x, ok := m.GetPacket().(*RestakingPacketData_BuyOrderPacket); ok {
		return x.BuyOrderPacket
	}
	return nil
}

func (m *RestakingPacketData) GetRestakePacket() *RestakePacketData {
	if x, ok := m.GetPacket().(*RestakingPacketData_RestakePacket); ok {
		return x.RestakePacket
	}
	return nil
}

func (m *RestakingPacketData) GetUndelegatePacket() *UndelegatePacketData {
	if x, ok := m.GetPacket().(*RestakingPacketData_UndelegatePacket); ok {
		return x.UndelegatePacket
	}
	return nil
}

func (m *RestakingPacketData) GetRetireSharePacket() *RetireSharePacketData {
	if x, ok := m.GetPacket().(*RestakingPacketData_RetireSharePacket); ok {
		return x.RetireSharePacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RestakingPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RestakingPacketData_NoData)(nil),
		(*RestakingPacketData_SellOrderPacket)(nil),
		(*RestakingPacketData_BuyOrderPacket)(nil),
		(*RestakingPacketData_RestakePacket)(nil),
		(*RestakingPacketData_UndelegatePacket)(nil),
		(*RestakingPacketData_RetireSharePacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// SellOrderPacketData defines a struct for the packet payload
type SellOrderPacketData struct {
	AmountDenom string `protobuf:"bytes,1,opt,name=amountDenom,proto3" json:"amountDenom,omitempty"`
	Amount      int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PriceDenom  string `protobuf:"bytes,3,opt,name=priceDenom,proto3" json:"priceDenom,omitempty"`
	Price       int32  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Seller      string `protobuf:"bytes,5,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (m *SellOrderPacketData) Reset()         { *m = SellOrderPacketData{} }
func (m *SellOrderPacketData) String() string { return proto.CompactTextString(m) }
func (*SellOrderPacketData) ProtoMessage()    {}
func (*SellOrderPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{2}
}
func (m *SellOrderPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellOrderPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellOrderPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellOrderPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellOrderPacketData.Merge(m, src)
}
func (m *SellOrderPacketData) XXX_Size() int {
	return m.Size()
}
func (m *SellOrderPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_SellOrderPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_SellOrderPacketData proto.InternalMessageInfo

func (m *SellOrderPacketData) GetAmountDenom() string {
	if m != nil {
		return m.AmountDenom
	}
	return ""
}

func (m *SellOrderPacketData) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SellOrderPacketData) GetPriceDenom() string {
	if m != nil {
		return m.PriceDenom
	}
	return ""
}

func (m *SellOrderPacketData) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SellOrderPacketData) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

// SellOrderPacketAck defines a struct for the packet acknowledgment
type SellOrderPacketAck struct {
	RemainingAmount int32  `protobuf:"varint,1,opt,name=remainingAmount,proto3" json:"remainingAmount,omitempty"`
	Gain            int32  `protobuf:"varint,2,opt,name=gain,proto3" json:"gain,omitempty"`
	Buyer           string `protobuf:"bytes,3,opt,name=buyer,proto3" json:"buyer,omitempty"`
}

func (m *SellOrderPacketAck) Reset()         { *m = SellOrderPacketAck{} }
func (m *SellOrderPacketAck) String() string { return proto.CompactTextString(m) }
func (*SellOrderPacketAck) ProtoMessage()    {}
func (*SellOrderPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{3}
}
func (m *SellOrderPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellOrderPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellOrderPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellOrderPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellOrderPacketAck.Merge(m, src)
}
func (m *SellOrderPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *SellOrderPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SellOrderPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_SellOrderPacketAck proto.InternalMessageInfo

func (m *SellOrderPacketAck) GetRemainingAmount() int32 {
	if m != nil {
		return m.RemainingAmount
	}
	return 0
}

func (m *SellOrderPacketAck) GetGain() int32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *SellOrderPacketAck) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

// BuyOrderPacketData defines a struct for the packet payload
type BuyOrderPacketData struct {
	AmountDenom string `protobuf:"bytes,1,opt,name=amountDenom,proto3" json:"amountDenom,omitempty"`
	Amount      int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PriceDenom  string `protobuf:"bytes,3,opt,name=priceDenom,proto3" json:"priceDenom,omitempty"`
	Price       int32  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Buyer       string `protobuf:"bytes,5,opt,name=buyer,proto3" json:"buyer,omitempty"`
}

func (m *BuyOrderPacketData) Reset()         { *m = BuyOrderPacketData{} }
func (m *BuyOrderPacketData) String() string { return proto.CompactTextString(m) }
func (*BuyOrderPacketData) ProtoMessage()    {}
func (*BuyOrderPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{4}
}
func (m *BuyOrderPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrderPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrderPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrderPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrderPacketData.Merge(m, src)
}
func (m *BuyOrderPacketData) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrderPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrderPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrderPacketData proto.InternalMessageInfo

func (m *BuyOrderPacketData) GetAmountDenom() string {
	if m != nil {
		return m.AmountDenom
	}
	return ""
}

func (m *BuyOrderPacketData) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BuyOrderPacketData) GetPriceDenom() string {
	if m != nil {
		return m.PriceDenom
	}
	return ""
}

func (m *BuyOrderPacketData) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BuyOrderPacketData) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

// BuyOrderPacketAck defines a struct for the packet acknowledgment
type BuyOrderPacketAck struct {
	RemainingAmount int32  `protobuf:"varint,1,opt,name=remainingAmount,proto3" json:"remainingAmount,omitempty"`
	Purchase        int32  `protobuf:"varint,2,opt,name=purchase,proto3" json:"purchase,omitempty"`
	Seller          string `protobuf:"bytes,3,opt,name=seller,proto3" json:"seller,omitempty"`
	Price           int32  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *BuyOrderPacketAck) Reset()         { *m = BuyOrderPacketAck{} }
func (m *BuyOrderPacketAck) String() string { return proto.CompactTextString(m) }
func (*BuyOrderPacketAck) ProtoMessage()    {}
func (*BuyOrderPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{5}
}
func (m *BuyOrderPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrderPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrderPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrderPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrderPacketAck.Merge(m, src)
}
func (m *BuyOrderPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrderPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrderPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrderPacketAck proto.InternalMessageInfo

func (m *BuyOrderPacketAck) GetRemainingAmount() int32 {
	if m != nil {
		return m.RemainingAmount
	}
	return 0
}

func (m *BuyOrderPacketAck) GetPurchase() int32 {
	if m != nil {
		return m.Purchase
	}
	return 0
}

func (m *BuyOrderPacketAck) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *BuyOrderPacketAck) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type RestakePacketData struct {
	Description        Description                            `protobuf:"bytes,1,opt,name=description,proto3" json:"description"`
	Commission         CommissionRates                        `protobuf:"bytes,2,opt,name=commission,proto3" json:"commission"`
	MinSelfDelegation  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_self_delegation"`
	DelegatorAddress   string                                 `protobuf:"bytes,4,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress   string                                 `protobuf:"bytes,5,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Pubkey             string                                 `protobuf:"bytes,6,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Value              types.Coin                             `protobuf:"bytes,7,opt,name=value,proto3" json:"value"`
	Restaker           string                                 `protobuf:"bytes,8,opt,name=restaker,proto3" json:"restaker,omitempty"`
	DestinationChainId string                                 `protobuf:"bytes,9,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
}

func (m *RestakePacketData) Reset()         { *m = RestakePacketData{} }
func (m *RestakePacketData) String() string { return proto.CompactTextString(m) }
func (*RestakePacketData) ProtoMessage()    {}
func (*RestakePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{6}
}
func (m *RestakePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestakePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestakePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestakePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestakePacketData.Merge(m, src)
}
func (m *RestakePacketData) XXX_Size() int {
	return m.Size()
}
func (m *RestakePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RestakePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RestakePacketData proto.InternalMessageInfo

func (m *RestakePacketData) GetDescription() Description {
	if m != nil {
		return m.Description
	}
	return Description{}
}

func (m *RestakePacketData) GetCommission() CommissionRates {
	if m != nil {
		return m.Commission
	}
	return CommissionRates{}
}

func (m *RestakePacketData) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *RestakePacketData) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *RestakePacketData) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *RestakePacketData) GetValue() types.Coin {
	if m != nil {
		return m.Value
	}
	return types.Coin{}
}

func (m *RestakePacketData) GetRestaker() string {
	if m != nil {
		return m.Restaker
	}
	return ""
}

func (m *RestakePacketData) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

type RestakePacketDataAck struct {
	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (m *RestakePacketDataAck) Reset()         { *m = RestakePacketDataAck{} }
func (m *RestakePacketDataAck) String() string { return proto.CompactTextString(m) }
func (*RestakePacketDataAck) ProtoMessage()    {}
func (*RestakePacketDataAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{7}
}
func (m *RestakePacketDataAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestakePacketDataAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestakePacketDataAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestakePacketDataAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestakePacketDataAck.Merge(m, src)
}
func (m *RestakePacketDataAck) XXX_Size() int {
	return m.Size()
}
func (m *RestakePacketDataAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RestakePacketDataAck.DiscardUnknown(m)
}

var xxx_messageInfo_RestakePacketDataAck proto.InternalMessageInfo

func (m *RestakePacketDataAck) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

// RetireSharePacketData defines a struct for the packet payload
type RetireSharePacketData struct {
	ValidatorAddress string      `protobuf:"bytes,1,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	Amount           *types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *RetireSharePacketData) Reset()         { *m = RetireSharePacketData{} }
func (m *RetireSharePacketData) String() string { return proto.CompactTextString(m) }
func (*RetireSharePacketData) ProtoMessage()    {}
func (*RetireSharePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{8}
}
func (m *RetireSharePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetireSharePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetireSharePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetireSharePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetireSharePacketData.Merge(m, src)
}
func (m *RetireSharePacketData) XXX_Size() int {
	return m.Size()
}
func (m *RetireSharePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RetireSharePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RetireSharePacketData proto.InternalMessageInfo

func (m *RetireSharePacketData) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *RetireSharePacketData) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

// RetireSharePacketAck defines a struct for the packet acknowledgment
type RetireSharePacketAck struct {
	Step int32 `protobuf:"varint,1,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *RetireSharePacketAck) Reset()         { *m = RetireSharePacketAck{} }
func (m *RetireSharePacketAck) String() string { return proto.CompactTextString(m) }
func (*RetireSharePacketAck) ProtoMessage()    {}
func (*RetireSharePacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{9}
}
func (m *RetireSharePacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetireSharePacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetireSharePacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetireSharePacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetireSharePacketAck.Merge(m, src)
}
func (m *RetireSharePacketAck) XXX_Size() int {
	return m.Size()
}
func (m *RetireSharePacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RetireSharePacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_RetireSharePacketAck proto.InternalMessageInfo

func (m *RetireSharePacketAck) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

// UndelegatePacketData defines a struct for the packet payload
type UndelegatePacketData struct {
	ValidatorAddress string      `protobuf:"bytes,1,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	Amount           *types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *UndelegatePacketData) Reset()         { *m = UndelegatePacketData{} }
func (m *UndelegatePacketData) String() string { return proto.CompactTextString(m) }
func (*UndelegatePacketData) ProtoMessage()    {}
func (*UndelegatePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{10}
}
func (m *UndelegatePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegatePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegatePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegatePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegatePacketData.Merge(m, src)
}
func (m *UndelegatePacketData) XXX_Size() int {
	return m.Size()
}
func (m *UndelegatePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegatePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegatePacketData proto.InternalMessageInfo

func (m *UndelegatePacketData) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *UndelegatePacketData) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

// UndelegatePacketAck defines a struct for the packet acknowledgment
type UndelegatePacketAck struct {
	Step int32 `protobuf:"varint,1,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *UndelegatePacketAck) Reset()         { *m = UndelegatePacketAck{} }
func (m *UndelegatePacketAck) String() string { return proto.CompactTextString(m) }
func (*UndelegatePacketAck) ProtoMessage()    {}
func (*UndelegatePacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2549f93fea6967e4, []int{11}
}
func (m *UndelegatePacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegatePacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegatePacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegatePacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegatePacketAck.Merge(m, src)
}
func (m *UndelegatePacketAck) XXX_Size() int {
	return m.Size()
}
func (m *UndelegatePacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegatePacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegatePacketAck proto.InternalMessageInfo

func (m *UndelegatePacketAck) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func init() {
	proto.RegisterType((*RestakingPacketData)(nil), "lightmos.restaking.RestakingPacketData")
	proto.RegisterType((*NoData)(nil), "lightmos.restaking.NoData")
	proto.RegisterType((*SellOrderPacketData)(nil), "lightmos.restaking.SellOrderPacketData")
	proto.RegisterType((*SellOrderPacketAck)(nil), "lightmos.restaking.SellOrderPacketAck")
	proto.RegisterType((*BuyOrderPacketData)(nil), "lightmos.restaking.BuyOrderPacketData")
	proto.RegisterType((*BuyOrderPacketAck)(nil), "lightmos.restaking.BuyOrderPacketAck")
	proto.RegisterType((*RestakePacketData)(nil), "lightmos.restaking.RestakePacketData")
	proto.RegisterType((*RestakePacketDataAck)(nil), "lightmos.restaking.RestakePacketDataAck")
	proto.RegisterType((*RetireSharePacketData)(nil), "lightmos.restaking.RetireSharePacketData")
	proto.RegisterType((*RetireSharePacketAck)(nil), "lightmos.restaking.RetireSharePacketAck")
	proto.RegisterType((*UndelegatePacketData)(nil), "lightmos.restaking.UndelegatePacketData")
	proto.RegisterType((*UndelegatePacketAck)(nil), "lightmos.restaking.UndelegatePacketAck")
}

func init() { proto.RegisterFile("empyrean/restaking/packet.proto", fileDescriptor_2549f93fea6967e4) }

var fileDescriptor_2549f93fea6967e4 = []byte{
	// 860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0x41, 0x8f, 0xe3, 0x34,
	0x14, 0xc7, 0x1b, 0xa6, 0xed, 0xb6, 0x6f, 0x04, 0xbb, 0x75, 0xcb, 0xaa, 0xdb, 0x43, 0xbb, 0x0a,
	0x62, 0x99, 0x5d, 0x34, 0x2d, 0x82, 0x3d, 0x72, 0x99, 0xce, 0x20, 0x98, 0x03, 0xb0, 0x4a, 0x05,
	0x12, 0x5c, 0x2a, 0x37, 0xf1, 0xa4, 0x56, 0x13, 0x3b, 0xb2, 0x9d, 0x15, 0xfd, 0x04, 0x5c, 0x39,
	0x23, 0xf1, 0x2d, 0xf6, 0xc0, 0x47, 0xd8, 0xe3, 0x6a, 0x4f, 0x88, 0xc3, 0x0a, 0xcd, 0x7c, 0x0f,
	0x84, 0x62, 0x3b, 0x99, 0x34, 0x09, 0x42, 0x1c, 0xe0, 0x54, 0x3f, 0xfb, 0xff, 0x7e, 0x7e, 0x7e,
	0x7e, 0x7e, 0x0d, 0xcc, 0x22, 0x1a, 0x6e, 0x55, 0xcc, 0xe5, 0x42, 0x10, 0xa9, 0xf0, 0x8e, 0xb2,
	0x70, 0x91, 0x60, 0x7f, 0x47, 0xd4, 0x3c, 0x11, 0x5c, 0x71, 0x84, 0x72, 0xc1, 0xbc, 0x10, 0x4c,
	0x1e, 0xf8, 0x5c, 0xc6, 0x5c, 0xae, 0xb5, 0x62, 0x61, 0x0c, 0x23, 0x9f, 0xb8, 0x0d, 0xbc, 0x62,
	0x64, 0x35, 0xa3, 0x90, 0x87, 0xdc, 0xf8, 0x66, 0x23, 0x3b, 0xfb, 0x20, 0xe4, 0x3c, 0x8c, 0xc8,
	0x42, 0x5b, 0x9b, 0xf4, 0x6a, 0x81, 0xd9, 0xde, 0x2e, 0xcd, 0xaa, 0x4b, 0x8a, 0xc6, 0x19, 0x33,
	0x4e, 0xac, 0x60, 0x5c, 0xec, 0xba, 0xc1, 0x92, 0x2c, 0x7c, 0x4e, 0x99, 0x59, 0x71, 0xff, 0x3c,
	0x82, 0xa1, 0x97, 0xef, 0xff, 0x4c, 0x1f, 0xec, 0x02, 0x2b, 0x8c, 0x9e, 0x42, 0x97, 0xf1, 0x6c,
	0x34, 0x76, 0x1e, 0x3a, 0x27, 0xc7, 0x1f, 0x4f, 0xe6, 0xf5, 0x73, 0xce, 0xbf, 0xd2, 0x8a, 0x2f,
	0x5a, 0x9e, 0xd5, 0xa2, 0x15, 0xdc, 0x95, 0x24, 0x8a, 0xbe, 0x16, 0x01, 0x11, 0x06, 0x36, 0x7e,
	0x4b, 0xbb, 0x7f, 0xd0, 0xe4, 0xbe, 0x3a, 0x94, 0x5a, 0x56, 0x95, 0x80, 0x9e, 0xc1, 0x3b, 0x9b,
	0x74, 0x5f, 0x66, 0x1e, 0x69, 0xe6, 0xa3, 0x26, 0xe6, 0xf2, 0x40, 0x69, 0x91, 0x15, 0x7f, 0xf4,
	0x25, 0xbc, 0x6d, 0x3c, 0x88, 0x05, 0xb6, 0x35, 0xf0, 0xfd, 0x26, 0xa0, 0x57, 0x16, 0x5a, 0xde,
	0xa1, 0x37, 0xfa, 0x16, 0xee, 0xa5, 0x2c, 0x20, 0x11, 0x09, 0xb1, 0xca, 0x89, 0x1d, 0x4d, 0x3c,
	0x69, 0x22, 0x7e, 0x53, 0xd1, 0x5a, 0x68, 0x8d, 0x81, 0xbe, 0x83, 0x81, 0x20, 0x8a, 0x0a, 0xb2,
	0xda, 0x62, 0x91, 0x83, 0xbb, 0x1a, 0xfc, 0xb8, 0x39, 0xd4, 0x8a, 0xd8, 0x92, 0xeb, 0x94, 0x65,
	0x0f, 0xba, 0xa6, 0x8a, 0xdd, 0x1e, 0x74, 0xcd, 0x35, 0xba, 0xbf, 0x38, 0x30, 0x6c, 0xb8, 0x12,
	0xf4, 0x10, 0x8e, 0x71, 0xcc, 0x53, 0xa6, 0x2e, 0x08, 0xe3, 0xb1, 0xae, 0x87, 0xbe, 0x57, 0x9e,
	0x42, 0xf7, 0xa1, 0x6b, 0x4c, 0x7d, 0xdb, 0x1d, 0xcf, 0x5a, 0x68, 0x0a, 0x90, 0x08, 0xea, 0x13,
	0xe3, 0x78, 0xa4, 0x1d, 0x4b, 0x33, 0x68, 0x04, 0x1d, 0x6d, 0xe9, 0xfc, 0x77, 0x3c, 0x63, 0x64,
	0xb4, 0xac, 0x04, 0x88, 0xd0, 0x49, 0xec, 0x7b, 0xd6, 0x72, 0xb7, 0x80, 0x2a, 0xe1, 0x9d, 0xf9,
	0x3b, 0x74, 0x02, 0x77, 0x05, 0x89, 0x31, 0x65, 0x94, 0x85, 0x67, 0x26, 0x08, 0x47, 0xd3, 0xaa,
	0xd3, 0x08, 0x41, 0x3b, 0xc4, 0x94, 0xd9, 0x18, 0xf5, 0x38, 0x8b, 0x60, 0x93, 0xee, 0x89, 0xb0,
	0xc1, 0x19, 0xc3, 0xfd, 0xd9, 0x01, 0x54, 0x2f, 0xa4, 0xff, 0x3d, 0x11, 0x45, 0x70, 0x9d, 0x72,
	0x70, 0x3f, 0x3a, 0x30, 0x38, 0x0c, 0xee, 0xdf, 0xa5, 0x61, 0x02, 0xbd, 0x24, 0x15, 0xfe, 0x16,
	0x4b, 0x62, 0xa3, 0x2c, 0xec, 0x52, 0xea, 0x8f, 0xca, 0xa9, 0x6f, 0x8e, 0xcf, 0xfd, 0xb5, 0x0d,
	0x83, 0xda, 0xf3, 0x40, 0x9f, 0xc3, 0x71, 0x40, 0xa4, 0x2f, 0x68, 0xa2, 0x28, 0x67, 0xb6, 0x7d,
	0xcc, 0x9a, 0xea, 0xf5, 0xe2, 0x56, 0xb6, 0x6c, 0xbf, 0x7c, 0x33, 0x6b, 0x79, 0x65, 0x4f, 0x74,
	0x09, 0xe0, 0xf3, 0x38, 0xa6, 0x52, 0x66, 0x1c, 0xd3, 0x47, 0xde, 0x6b, 0xe2, 0x9c, 0x17, 0x2a,
	0x0f, 0x2b, 0x22, 0x2d, 0xab, 0xe4, 0x8c, 0x22, 0x18, 0xc6, 0x94, 0xad, 0x25, 0x89, 0xae, 0xd6,
	0xf6, 0x91, 0x65, 0x4c, 0x7d, 0xc8, 0xe5, 0xa7, 0x99, 0xfc, 0xf7, 0x37, 0xb3, 0x47, 0x21, 0x55,
	0xdb, 0x74, 0x33, 0xf7, 0x79, 0x6c, 0x7b, 0xb6, 0xfd, 0x39, 0x95, 0xc1, 0x6e, 0xa1, 0xf6, 0x09,
	0x91, 0xf3, 0x4b, 0xa6, 0x5e, 0xbf, 0x38, 0x05, 0xdb, 0xd2, 0x2f, 0x99, 0xf2, 0x06, 0x31, 0x65,
	0x2b, 0x12, 0x5d, 0x5d, 0x14, 0x58, 0xf4, 0x19, 0x0c, 0xec, 0x26, 0x5c, 0xac, 0x71, 0x10, 0x08,
	0x22, 0xa5, 0xce, 0x5c, 0x7f, 0x39, 0x7e, 0xfd, 0xe2, 0x74, 0x64, 0xbd, 0xcf, 0xcc, 0xca, 0x4a,
	0x09, 0xca, 0x42, 0xef, 0x5e, 0xe1, 0x62, 0xe7, 0x33, 0xcc, 0x73, 0x1c, 0xd1, 0xe0, 0x00, 0xd3,
	0xf9, 0x27, 0x4c, 0xe1, 0x92, 0x63, 0xee, 0x43, 0x37, 0x49, 0x37, 0x3b, 0xb2, 0xd7, 0xad, 0xa3,
	0xef, 0x59, 0x0b, 0x2d, 0xa0, 0xf3, 0x1c, 0x47, 0x29, 0x19, 0xdf, 0xd1, 0x99, 0x1d, 0xde, 0x66,
	0x36, 0xfb, 0x8f, 0x98, 0x9f, 0x73, 0x9a, 0xdf, 0x8a, 0xd1, 0x65, 0x85, 0x63, 0xfb, 0x9e, 0x18,
	0xf7, 0x34, 0xaa, 0xb0, 0xd1, 0x1c, 0x50, 0x40, 0xa4, 0xa2, 0x4c, 0x67, 0xe0, 0x7c, 0x8b, 0x29,
	0xbb, 0x0c, 0xc6, 0x7d, 0xad, 0x6a, 0x58, 0x71, 0x3f, 0x82, 0x51, 0xad, 0x72, 0xb2, 0x32, 0x1e,
	0xc3, 0x1d, 0x99, 0xfa, 0x3e, 0x21, 0x81, 0x2e, 0x9c, 0x9e, 0x97, 0x9b, 0x6e, 0x02, 0xef, 0x36,
	0xf6, 0x37, 0xf4, 0x04, 0x6a, 0x67, 0xb6, 0x4f, 0xb3, 0x9e, 0x8b, 0x0f, 0x0f, 0xde, 0x67, 0xf3,
	0xa1, 0xf3, 0x47, 0xeb, 0x3e, 0xc9, 0x62, 0xac, 0xec, 0x98, 0xc5, 0x88, 0xa0, 0x2d, 0x15, 0x49,
	0xec, 0xfb, 0xd2, 0x63, 0x97, 0xc3, 0xa8, 0xa9, 0xad, 0xff, 0x77, 0xc1, 0x3d, 0x86, 0x61, 0x75,
	0xc3, 0xbf, 0x89, 0x6d, 0xf9, 0xf4, 0xe5, 0xf5, 0xd4, 0x79, 0x75, 0x3d, 0x75, 0xfe, 0xb8, 0x9e,
	0x3a, 0x3f, 0xdd, 0x4c, 0x5b, 0xaf, 0x6e, 0xa6, 0xad, 0xdf, 0x6e, 0xa6, 0xad, 0xef, 0x27, 0xc5,
	0x67, 0xc1, 0x0f, 0xa5, 0xcf, 0x11, 0x5d, 0xe9, 0x9b, 0xae, 0xfe, 0x3e, 0xf8, 0xe4, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x08, 0x55, 0x2e, 0x97, 0x01, 0x09, 0x00, 0x00,
}

func (m *RestakingPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestakingPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakingPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RestakingPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakingPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RestakingPacketData_SellOrderPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakingPacketData_SellOrderPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SellOrderPacket != nil {
		{
			size, err := m.SellOrderPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RestakingPacketData_BuyOrderPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakingPacketData_BuyOrderPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuyOrderPacket != nil {
		{
			size, err := m.BuyOrderPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RestakingPacketData_RestakePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakingPacketData_RestakePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RestakePacket != nil {
		{
			size, err := m.RestakePacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RestakingPacketData_UndelegatePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakingPacketData_UndelegatePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UndelegatePacket != nil {
		{
			size, err := m.UndelegatePacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RestakingPacketData_RetireSharePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakingPacketData_RetireSharePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetireSharePacket != nil {
		{
			size, err := m.RetireSharePacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SellOrderPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellOrderPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellOrderPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Price != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PriceDenom) > 0 {
		i -= len(m.PriceDenom)
		copy(dAtA[i:], m.PriceDenom)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PriceDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AmountDenom) > 0 {
		i -= len(m.AmountDenom)
		copy(dAtA[i:], m.AmountDenom)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.AmountDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SellOrderPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellOrderPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellOrderPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Gain != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Gain))
		i--
		dAtA[i] = 0x10
	}
	if m.RemainingAmount != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.RemainingAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuyOrderPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrderPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrderPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Price != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PriceDenom) > 0 {
		i -= len(m.PriceDenom)
		copy(dAtA[i:], m.PriceDenom)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PriceDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AmountDenom) > 0 {
		i -= len(m.AmountDenom)
		copy(dAtA[i:], m.AmountDenom)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.AmountDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuyOrderPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrderPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrderPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Purchase != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Purchase))
		i--
		dAtA[i] = 0x10
	}
	if m.RemainingAmount != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.RemainingAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RestakePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestakePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Restaker) > 0 {
		i -= len(m.Restaker)
		copy(dAtA[i:], m.Restaker)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Restaker)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.MinSelfDelegation.Size()
		i -= size
		if _, err := m.MinSelfDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RestakePacketDataAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestakePacketDataAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakePacketDataAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Succeed {
		i--
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetireSharePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetireSharePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetireSharePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetireSharePacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetireSharePacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetireSharePacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Step != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UndelegatePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegatePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegatePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegatePacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegatePacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegatePacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Step != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RestakingPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *RestakingPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *RestakingPacketData_SellOrderPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOrderPacket != nil {
		l = m.SellOrderPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *RestakingPacketData_BuyOrderPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuyOrderPacket != nil {
		l = m.BuyOrderPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *RestakingPacketData_RestakePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RestakePacket != nil {
		l = m.RestakePacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *RestakingPacketData_UndelegatePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UndelegatePacket != nil {
		l = m.UndelegatePacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *RestakingPacketData_RetireSharePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetireSharePacket != nil {
		l = m.RetireSharePacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SellOrderPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AmountDenom)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPacket(uint64(m.Amount))
	}
	l = len(m.PriceDenom)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovPacket(uint64(m.Price))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *SellOrderPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemainingAmount != 0 {
		n += 1 + sovPacket(uint64(m.RemainingAmount))
	}
	if m.Gain != 0 {
		n += 1 + sovPacket(uint64(m.Gain))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *BuyOrderPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AmountDenom)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPacket(uint64(m.Amount))
	}
	l = len(m.PriceDenom)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovPacket(uint64(m.Price))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *BuyOrderPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemainingAmount != 0 {
		n += 1 + sovPacket(uint64(m.RemainingAmount))
	}
	if m.Purchase != 0 {
		n += 1 + sovPacket(uint64(m.Purchase))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovPacket(uint64(m.Price))
	}
	return n
}

func (m *RestakePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Description.Size()
	n += 1 + l + sovPacket(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovPacket(uint64(l))
	l = m.MinSelfDelegation.Size()
	n += 1 + l + sovPacket(uint64(l))
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovPacket(uint64(l))
	l = len(m.Restaker)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *RestakePacketDataAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Succeed {
		n += 2
	}
	return n
}

func (m *RetireSharePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *RetireSharePacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Step != 0 {
		n += 1 + sovPacket(uint64(m.Step))
	}
	return n
}

func (m *UndelegatePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *UndelegatePacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Step != 0 {
		n += 1 + sovPacket(uint64(m.Step))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RestakingPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestakingPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestakingPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &RestakingPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SellOrderPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &RestakingPacketData_SellOrderPacket{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BuyOrderPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &RestakingPacketData_BuyOrderPacket{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestakePacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RestakePacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &RestakingPacketData_RestakePacket{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegatePacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UndelegatePacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &RestakingPacketData_UndelegatePacket{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetireSharePacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RetireSharePacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &RestakingPacketData_RetireSharePacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SellOrderPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellOrderPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellOrderPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SellOrderPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellOrderPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellOrderPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingAmount", wireType)
			}
			m.RemainingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gain", wireType)
			}
			m.Gain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrderPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrderPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrderPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrderPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrderPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrderPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingAmount", wireType)
			}
			m.RemainingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchase", wireType)
			}
			m.Purchase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purchase |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestakePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestakePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestakePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restaker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Restaker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestakePacketDataAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestakePacketDataAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestakePacketDataAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetireSharePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetireSharePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetireSharePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetireSharePacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetireSharePacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetireSharePacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegatePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegatePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegatePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegatePacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegatePacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegatePacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
