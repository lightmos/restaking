// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package restaking

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_OrderBook_2_list)(nil)

type _OrderBook_2_list struct {
	list *[]*Order
}

func (x *_OrderBook_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OrderBook_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_OrderBook_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Order)
	(*x.list)[i] = concreteValue
}

func (x *_OrderBook_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Order)
	*x.list = append(*x.list, concreteValue)
}

func (x *_OrderBook_2_list) AppendMutable() protoreflect.Value {
	v := new(Order)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OrderBook_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_OrderBook_2_list) NewElement() protoreflect.Value {
	v := new(Order)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OrderBook_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OrderBook         protoreflect.MessageDescriptor
	fd_OrderBook_idCount protoreflect.FieldDescriptor
	fd_OrderBook_orders  protoreflect.FieldDescriptor
)

func init() {
	file_lightmos_restaking_order_proto_init()
	md_OrderBook = File_lightmos_restaking_order_proto.Messages().ByName("OrderBook")
	fd_OrderBook_idCount = md_OrderBook.Fields().ByName("idCount")
	fd_OrderBook_orders = md_OrderBook.Fields().ByName("orders")
}

var _ protoreflect.Message = (*fastReflection_OrderBook)(nil)

type fastReflection_OrderBook OrderBook

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OrderBook)(x)
}

func (x *OrderBook) slowProtoReflect() protoreflect.Message {
	mi := &file_lightmos_restaking_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OrderBook_messageType fastReflection_OrderBook_messageType
var _ protoreflect.MessageType = fastReflection_OrderBook_messageType{}

type fastReflection_OrderBook_messageType struct{}

func (x fastReflection_OrderBook_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OrderBook)(nil)
}
func (x fastReflection_OrderBook_messageType) New() protoreflect.Message {
	return new(fastReflection_OrderBook)
}
func (x fastReflection_OrderBook_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderBook
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OrderBook) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderBook
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OrderBook) Type() protoreflect.MessageType {
	return _fastReflection_OrderBook_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OrderBook) New() protoreflect.Message {
	return new(fastReflection_OrderBook)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OrderBook) Interface() protoreflect.ProtoMessage {
	return (*OrderBook)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OrderBook) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.IdCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.IdCount)
		if !f(fd_OrderBook_idCount, value) {
			return
		}
	}
	if len(x.Orders) != 0 {
		value := protoreflect.ValueOfList(&_OrderBook_2_list{list: &x.Orders})
		if !f(fd_OrderBook_orders, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OrderBook) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "lightmos.restaking.OrderBook.idCount":
		return x.IdCount != int32(0)
	case "lightmos.restaking.OrderBook.orders":
		return len(x.Orders) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderBook"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderBook does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBook) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "lightmos.restaking.OrderBook.idCount":
		x.IdCount = int32(0)
	case "lightmos.restaking.OrderBook.orders":
		x.Orders = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderBook"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderBook does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OrderBook) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "lightmos.restaking.OrderBook.idCount":
		value := x.IdCount
		return protoreflect.ValueOfInt32(value)
	case "lightmos.restaking.OrderBook.orders":
		if len(x.Orders) == 0 {
			return protoreflect.ValueOfList(&_OrderBook_2_list{})
		}
		listValue := &_OrderBook_2_list{list: &x.Orders}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderBook"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderBook does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBook) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "lightmos.restaking.OrderBook.idCount":
		x.IdCount = int32(value.Int())
	case "lightmos.restaking.OrderBook.orders":
		lv := value.List()
		clv := lv.(*_OrderBook_2_list)
		x.Orders = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderBook"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderBook does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBook) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.OrderBook.orders":
		if x.Orders == nil {
			x.Orders = []*Order{}
		}
		value := &_OrderBook_2_list{list: &x.Orders}
		return protoreflect.ValueOfList(value)
	case "lightmos.restaking.OrderBook.idCount":
		panic(fmt.Errorf("field idCount of message lightmos.restaking.OrderBook is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderBook"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderBook does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OrderBook) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.OrderBook.idCount":
		return protoreflect.ValueOfInt32(int32(0))
	case "lightmos.restaking.OrderBook.orders":
		list := []*Order{}
		return protoreflect.ValueOfList(&_OrderBook_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderBook"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderBook does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OrderBook) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in lightmos.restaking.OrderBook", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OrderBook) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBook) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OrderBook) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OrderBook) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OrderBook)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.IdCount != 0 {
			n += 1 + runtime.Sov(uint64(x.IdCount))
		}
		if len(x.Orders) > 0 {
			for _, e := range x.Orders {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OrderBook)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Orders) > 0 {
			for iNdEx := len(x.Orders) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Orders[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.IdCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IdCount))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OrderBook)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderBook: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IdCount", wireType)
				}
				x.IdCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IdCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Orders = append(x.Orders, &Order{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Orders[len(x.Orders)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Order         protoreflect.MessageDescriptor
	fd_Order_id      protoreflect.FieldDescriptor
	fd_Order_creator protoreflect.FieldDescriptor
	fd_Order_amount  protoreflect.FieldDescriptor
	fd_Order_price   protoreflect.FieldDescriptor
)

func init() {
	file_lightmos_restaking_order_proto_init()
	md_Order = File_lightmos_restaking_order_proto.Messages().ByName("Order")
	fd_Order_id = md_Order.Fields().ByName("id")
	fd_Order_creator = md_Order.Fields().ByName("creator")
	fd_Order_amount = md_Order.Fields().ByName("amount")
	fd_Order_price = md_Order.Fields().ByName("price")
}

var _ protoreflect.Message = (*fastReflection_Order)(nil)

type fastReflection_Order Order

func (x *Order) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Order)(x)
}

func (x *Order) slowProtoReflect() protoreflect.Message {
	mi := &file_lightmos_restaking_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Order_messageType fastReflection_Order_messageType
var _ protoreflect.MessageType = fastReflection_Order_messageType{}

type fastReflection_Order_messageType struct{}

func (x fastReflection_Order_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Order)(nil)
}
func (x fastReflection_Order_messageType) New() protoreflect.Message {
	return new(fastReflection_Order)
}
func (x fastReflection_Order_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Order
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Order) Descriptor() protoreflect.MessageDescriptor {
	return md_Order
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Order) Type() protoreflect.MessageType {
	return _fastReflection_Order_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Order) New() protoreflect.Message {
	return new(fastReflection_Order)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Order) Interface() protoreflect.ProtoMessage {
	return (*Order)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Order) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != int32(0) {
		value := protoreflect.ValueOfInt32(x.Id)
		if !f(fd_Order_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Order_creator, value) {
			return
		}
	}
	if x.Amount != int32(0) {
		value := protoreflect.ValueOfInt32(x.Amount)
		if !f(fd_Order_amount, value) {
			return
		}
	}
	if x.Price != int32(0) {
		value := protoreflect.ValueOfInt32(x.Price)
		if !f(fd_Order_price, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Order) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "lightmos.restaking.Order.id":
		return x.Id != int32(0)
	case "lightmos.restaking.Order.creator":
		return x.Creator != ""
	case "lightmos.restaking.Order.amount":
		return x.Amount != int32(0)
	case "lightmos.restaking.Order.price":
		return x.Price != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.Order"))
		}
		panic(fmt.Errorf("message lightmos.restaking.Order does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Order) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "lightmos.restaking.Order.id":
		x.Id = int32(0)
	case "lightmos.restaking.Order.creator":
		x.Creator = ""
	case "lightmos.restaking.Order.amount":
		x.Amount = int32(0)
	case "lightmos.restaking.Order.price":
		x.Price = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.Order"))
		}
		panic(fmt.Errorf("message lightmos.restaking.Order does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Order) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "lightmos.restaking.Order.id":
		value := x.Id
		return protoreflect.ValueOfInt32(value)
	case "lightmos.restaking.Order.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "lightmos.restaking.Order.amount":
		value := x.Amount
		return protoreflect.ValueOfInt32(value)
	case "lightmos.restaking.Order.price":
		value := x.Price
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.Order"))
		}
		panic(fmt.Errorf("message lightmos.restaking.Order does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Order) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "lightmos.restaking.Order.id":
		x.Id = int32(value.Int())
	case "lightmos.restaking.Order.creator":
		x.Creator = value.Interface().(string)
	case "lightmos.restaking.Order.amount":
		x.Amount = int32(value.Int())
	case "lightmos.restaking.Order.price":
		x.Price = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.Order"))
		}
		panic(fmt.Errorf("message lightmos.restaking.Order does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Order) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.Order.id":
		panic(fmt.Errorf("field id of message lightmos.restaking.Order is not mutable"))
	case "lightmos.restaking.Order.creator":
		panic(fmt.Errorf("field creator of message lightmos.restaking.Order is not mutable"))
	case "lightmos.restaking.Order.amount":
		panic(fmt.Errorf("field amount of message lightmos.restaking.Order is not mutable"))
	case "lightmos.restaking.Order.price":
		panic(fmt.Errorf("field price of message lightmos.restaking.Order is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.Order"))
		}
		panic(fmt.Errorf("message lightmos.restaking.Order does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Order) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.Order.id":
		return protoreflect.ValueOfInt32(int32(0))
	case "lightmos.restaking.Order.creator":
		return protoreflect.ValueOfString("")
	case "lightmos.restaking.Order.amount":
		return protoreflect.ValueOfInt32(int32(0))
	case "lightmos.restaking.Order.price":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.Order"))
		}
		panic(fmt.Errorf("message lightmos.restaking.Order does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Order) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in lightmos.restaking.Order", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Order) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Order) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Order) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Order) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Order)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		if x.Price != 0 {
			n += 1 + runtime.Sov(uint64(x.Price))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Order)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Price != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Price))
			i--
			dAtA[i] = 0x20
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Order)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Order: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
				}
				x.Price = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Price |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_OrderDoneHistory_3_list)(nil)

type _OrderDoneHistory_3_list struct {
	list *[]*DoneChanHistory
}

func (x *_OrderDoneHistory_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OrderDoneHistory_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_OrderDoneHistory_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DoneChanHistory)
	(*x.list)[i] = concreteValue
}

func (x *_OrderDoneHistory_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DoneChanHistory)
	*x.list = append(*x.list, concreteValue)
}

func (x *_OrderDoneHistory_3_list) AppendMutable() protoreflect.Value {
	v := new(DoneChanHistory)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OrderDoneHistory_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_OrderDoneHistory_3_list) NewElement() protoreflect.Value {
	v := new(DoneChanHistory)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OrderDoneHistory_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OrderDoneHistory              protoreflect.MessageDescriptor
	fd_OrderDoneHistory_fromChainId  protoreflect.FieldDescriptor
	fd_OrderDoneHistory_toChainId    protoreflect.FieldDescriptor
	fd_OrderDoneHistory_chainHistory protoreflect.FieldDescriptor
)

func init() {
	file_lightmos_restaking_order_proto_init()
	md_OrderDoneHistory = File_lightmos_restaking_order_proto.Messages().ByName("OrderDoneHistory")
	fd_OrderDoneHistory_fromChainId = md_OrderDoneHistory.Fields().ByName("fromChainId")
	fd_OrderDoneHistory_toChainId = md_OrderDoneHistory.Fields().ByName("toChainId")
	fd_OrderDoneHistory_chainHistory = md_OrderDoneHistory.Fields().ByName("chainHistory")
}

var _ protoreflect.Message = (*fastReflection_OrderDoneHistory)(nil)

type fastReflection_OrderDoneHistory OrderDoneHistory

func (x *OrderDoneHistory) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OrderDoneHistory)(x)
}

func (x *OrderDoneHistory) slowProtoReflect() protoreflect.Message {
	mi := &file_lightmos_restaking_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OrderDoneHistory_messageType fastReflection_OrderDoneHistory_messageType
var _ protoreflect.MessageType = fastReflection_OrderDoneHistory_messageType{}

type fastReflection_OrderDoneHistory_messageType struct{}

func (x fastReflection_OrderDoneHistory_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OrderDoneHistory)(nil)
}
func (x fastReflection_OrderDoneHistory_messageType) New() protoreflect.Message {
	return new(fastReflection_OrderDoneHistory)
}
func (x fastReflection_OrderDoneHistory_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderDoneHistory
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OrderDoneHistory) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderDoneHistory
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OrderDoneHistory) Type() protoreflect.MessageType {
	return _fastReflection_OrderDoneHistory_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OrderDoneHistory) New() protoreflect.Message {
	return new(fastReflection_OrderDoneHistory)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OrderDoneHistory) Interface() protoreflect.ProtoMessage {
	return (*OrderDoneHistory)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OrderDoneHistory) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FromChainId != "" {
		value := protoreflect.ValueOfString(x.FromChainId)
		if !f(fd_OrderDoneHistory_fromChainId, value) {
			return
		}
	}
	if x.ToChainId != "" {
		value := protoreflect.ValueOfString(x.ToChainId)
		if !f(fd_OrderDoneHistory_toChainId, value) {
			return
		}
	}
	if len(x.ChainHistory) != 0 {
		value := protoreflect.ValueOfList(&_OrderDoneHistory_3_list{list: &x.ChainHistory})
		if !f(fd_OrderDoneHistory_chainHistory, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OrderDoneHistory) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneHistory.fromChainId":
		return x.FromChainId != ""
	case "lightmos.restaking.OrderDoneHistory.toChainId":
		return x.ToChainId != ""
	case "lightmos.restaking.OrderDoneHistory.chainHistory":
		return len(x.ChainHistory) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneHistory does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDoneHistory) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneHistory.fromChainId":
		x.FromChainId = ""
	case "lightmos.restaking.OrderDoneHistory.toChainId":
		x.ToChainId = ""
	case "lightmos.restaking.OrderDoneHistory.chainHistory":
		x.ChainHistory = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneHistory does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OrderDoneHistory) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "lightmos.restaking.OrderDoneHistory.fromChainId":
		value := x.FromChainId
		return protoreflect.ValueOfString(value)
	case "lightmos.restaking.OrderDoneHistory.toChainId":
		value := x.ToChainId
		return protoreflect.ValueOfString(value)
	case "lightmos.restaking.OrderDoneHistory.chainHistory":
		if len(x.ChainHistory) == 0 {
			return protoreflect.ValueOfList(&_OrderDoneHistory_3_list{})
		}
		listValue := &_OrderDoneHistory_3_list{list: &x.ChainHistory}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneHistory does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDoneHistory) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneHistory.fromChainId":
		x.FromChainId = value.Interface().(string)
	case "lightmos.restaking.OrderDoneHistory.toChainId":
		x.ToChainId = value.Interface().(string)
	case "lightmos.restaking.OrderDoneHistory.chainHistory":
		lv := value.List()
		clv := lv.(*_OrderDoneHistory_3_list)
		x.ChainHistory = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneHistory does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDoneHistory) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneHistory.chainHistory":
		if x.ChainHistory == nil {
			x.ChainHistory = []*DoneChanHistory{}
		}
		value := &_OrderDoneHistory_3_list{list: &x.ChainHistory}
		return protoreflect.ValueOfList(value)
	case "lightmos.restaking.OrderDoneHistory.fromChainId":
		panic(fmt.Errorf("field fromChainId of message lightmos.restaking.OrderDoneHistory is not mutable"))
	case "lightmos.restaking.OrderDoneHistory.toChainId":
		panic(fmt.Errorf("field toChainId of message lightmos.restaking.OrderDoneHistory is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneHistory does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OrderDoneHistory) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneHistory.fromChainId":
		return protoreflect.ValueOfString("")
	case "lightmos.restaking.OrderDoneHistory.toChainId":
		return protoreflect.ValueOfString("")
	case "lightmos.restaking.OrderDoneHistory.chainHistory":
		list := []*DoneChanHistory{}
		return protoreflect.ValueOfList(&_OrderDoneHistory_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneHistory does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OrderDoneHistory) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in lightmos.restaking.OrderDoneHistory", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OrderDoneHistory) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDoneHistory) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OrderDoneHistory) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OrderDoneHistory) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OrderDoneHistory)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.FromChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ToChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ChainHistory) > 0 {
			for _, e := range x.ChainHistory {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OrderDoneHistory)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ChainHistory) > 0 {
			for iNdEx := len(x.ChainHistory) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ChainHistory[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.ToChainId) > 0 {
			i -= len(x.ToChainId)
			copy(dAtA[i:], x.ToChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ToChainId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.FromChainId) > 0 {
			i -= len(x.FromChainId)
			copy(dAtA[i:], x.FromChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FromChainId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OrderDoneHistory)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderDoneHistory: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderDoneHistory: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FromChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FromChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ToChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ToChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainHistory", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainHistory = append(x.ChainHistory, &DoneChanHistory{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ChainHistory[len(x.ChainHistory)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_DoneChanHistory_3_list)(nil)

type _DoneChanHistory_3_list struct {
	list *[]*OrderDemoList
}

func (x *_DoneChanHistory_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DoneChanHistory_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_DoneChanHistory_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OrderDemoList)
	(*x.list)[i] = concreteValue
}

func (x *_DoneChanHistory_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OrderDemoList)
	*x.list = append(*x.list, concreteValue)
}

func (x *_DoneChanHistory_3_list) AppendMutable() protoreflect.Value {
	v := new(OrderDemoList)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DoneChanHistory_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_DoneChanHistory_3_list) NewElement() protoreflect.Value {
	v := new(OrderDemoList)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DoneChanHistory_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DoneChanHistory           protoreflect.MessageDescriptor
	fd_DoneChanHistory_srcDemo   protoreflect.FieldDescriptor
	fd_DoneChanHistory_dstDemo   protoreflect.FieldDescriptor
	fd_DoneChanHistory_orderDemo protoreflect.FieldDescriptor
)

func init() {
	file_lightmos_restaking_order_proto_init()
	md_DoneChanHistory = File_lightmos_restaking_order_proto.Messages().ByName("DoneChanHistory")
	fd_DoneChanHistory_srcDemo = md_DoneChanHistory.Fields().ByName("srcDemo")
	fd_DoneChanHistory_dstDemo = md_DoneChanHistory.Fields().ByName("dstDemo")
	fd_DoneChanHistory_orderDemo = md_DoneChanHistory.Fields().ByName("orderDemo")
}

var _ protoreflect.Message = (*fastReflection_DoneChanHistory)(nil)

type fastReflection_DoneChanHistory DoneChanHistory

func (x *DoneChanHistory) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DoneChanHistory)(x)
}

func (x *DoneChanHistory) slowProtoReflect() protoreflect.Message {
	mi := &file_lightmos_restaking_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DoneChanHistory_messageType fastReflection_DoneChanHistory_messageType
var _ protoreflect.MessageType = fastReflection_DoneChanHistory_messageType{}

type fastReflection_DoneChanHistory_messageType struct{}

func (x fastReflection_DoneChanHistory_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DoneChanHistory)(nil)
}
func (x fastReflection_DoneChanHistory_messageType) New() protoreflect.Message {
	return new(fastReflection_DoneChanHistory)
}
func (x fastReflection_DoneChanHistory_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DoneChanHistory
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DoneChanHistory) Descriptor() protoreflect.MessageDescriptor {
	return md_DoneChanHistory
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DoneChanHistory) Type() protoreflect.MessageType {
	return _fastReflection_DoneChanHistory_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DoneChanHistory) New() protoreflect.Message {
	return new(fastReflection_DoneChanHistory)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DoneChanHistory) Interface() protoreflect.ProtoMessage {
	return (*DoneChanHistory)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DoneChanHistory) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SrcDemo != "" {
		value := protoreflect.ValueOfString(x.SrcDemo)
		if !f(fd_DoneChanHistory_srcDemo, value) {
			return
		}
	}
	if x.DstDemo != "" {
		value := protoreflect.ValueOfString(x.DstDemo)
		if !f(fd_DoneChanHistory_dstDemo, value) {
			return
		}
	}
	if len(x.OrderDemo) != 0 {
		value := protoreflect.ValueOfList(&_DoneChanHistory_3_list{list: &x.OrderDemo})
		if !f(fd_DoneChanHistory_orderDemo, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DoneChanHistory) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "lightmos.restaking.DoneChanHistory.srcDemo":
		return x.SrcDemo != ""
	case "lightmos.restaking.DoneChanHistory.dstDemo":
		return x.DstDemo != ""
	case "lightmos.restaking.DoneChanHistory.orderDemo":
		return len(x.OrderDemo) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.DoneChanHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.DoneChanHistory does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DoneChanHistory) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "lightmos.restaking.DoneChanHistory.srcDemo":
		x.SrcDemo = ""
	case "lightmos.restaking.DoneChanHistory.dstDemo":
		x.DstDemo = ""
	case "lightmos.restaking.DoneChanHistory.orderDemo":
		x.OrderDemo = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.DoneChanHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.DoneChanHistory does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DoneChanHistory) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "lightmos.restaking.DoneChanHistory.srcDemo":
		value := x.SrcDemo
		return protoreflect.ValueOfString(value)
	case "lightmos.restaking.DoneChanHistory.dstDemo":
		value := x.DstDemo
		return protoreflect.ValueOfString(value)
	case "lightmos.restaking.DoneChanHistory.orderDemo":
		if len(x.OrderDemo) == 0 {
			return protoreflect.ValueOfList(&_DoneChanHistory_3_list{})
		}
		listValue := &_DoneChanHistory_3_list{list: &x.OrderDemo}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.DoneChanHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.DoneChanHistory does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DoneChanHistory) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "lightmos.restaking.DoneChanHistory.srcDemo":
		x.SrcDemo = value.Interface().(string)
	case "lightmos.restaking.DoneChanHistory.dstDemo":
		x.DstDemo = value.Interface().(string)
	case "lightmos.restaking.DoneChanHistory.orderDemo":
		lv := value.List()
		clv := lv.(*_DoneChanHistory_3_list)
		x.OrderDemo = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.DoneChanHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.DoneChanHistory does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DoneChanHistory) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.DoneChanHistory.orderDemo":
		if x.OrderDemo == nil {
			x.OrderDemo = []*OrderDemoList{}
		}
		value := &_DoneChanHistory_3_list{list: &x.OrderDemo}
		return protoreflect.ValueOfList(value)
	case "lightmos.restaking.DoneChanHistory.srcDemo":
		panic(fmt.Errorf("field srcDemo of message lightmos.restaking.DoneChanHistory is not mutable"))
	case "lightmos.restaking.DoneChanHistory.dstDemo":
		panic(fmt.Errorf("field dstDemo of message lightmos.restaking.DoneChanHistory is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.DoneChanHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.DoneChanHistory does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DoneChanHistory) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.DoneChanHistory.srcDemo":
		return protoreflect.ValueOfString("")
	case "lightmos.restaking.DoneChanHistory.dstDemo":
		return protoreflect.ValueOfString("")
	case "lightmos.restaking.DoneChanHistory.orderDemo":
		list := []*OrderDemoList{}
		return protoreflect.ValueOfList(&_DoneChanHistory_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.DoneChanHistory"))
		}
		panic(fmt.Errorf("message lightmos.restaking.DoneChanHistory does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DoneChanHistory) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in lightmos.restaking.DoneChanHistory", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DoneChanHistory) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DoneChanHistory) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DoneChanHistory) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DoneChanHistory) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DoneChanHistory)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SrcDemo)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DstDemo)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.OrderDemo) > 0 {
			for _, e := range x.OrderDemo {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DoneChanHistory)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.OrderDemo) > 0 {
			for iNdEx := len(x.OrderDemo) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OrderDemo[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.DstDemo) > 0 {
			i -= len(x.DstDemo)
			copy(dAtA[i:], x.DstDemo)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DstDemo)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SrcDemo) > 0 {
			i -= len(x.SrcDemo)
			copy(dAtA[i:], x.SrcDemo)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SrcDemo)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DoneChanHistory)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DoneChanHistory: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DoneChanHistory: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SrcDemo", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SrcDemo = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DstDemo", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DstDemo = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderDemo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OrderDemo = append(x.OrderDemo, &OrderDemoList{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OrderDemo[len(x.OrderDemo)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_OrderDemoList_3_list)(nil)

type _OrderDemoList_3_list struct {
	list *[]*OrderDoneList
}

func (x *_OrderDemoList_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OrderDemoList_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_OrderDemoList_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OrderDoneList)
	(*x.list)[i] = concreteValue
}

func (x *_OrderDemoList_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OrderDoneList)
	*x.list = append(*x.list, concreteValue)
}

func (x *_OrderDemoList_3_list) AppendMutable() protoreflect.Value {
	v := new(OrderDoneList)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OrderDemoList_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_OrderDemoList_3_list) NewElement() protoreflect.Value {
	v := new(OrderDoneList)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OrderDemoList_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OrderDemoList               protoreflect.MessageDescriptor
	fd_OrderDemoList_buyer         protoreflect.FieldDescriptor
	fd_OrderDemoList_seller        protoreflect.FieldDescriptor
	fd_OrderDemoList_orderDoneList protoreflect.FieldDescriptor
)

func init() {
	file_lightmos_restaking_order_proto_init()
	md_OrderDemoList = File_lightmos_restaking_order_proto.Messages().ByName("OrderDemoList")
	fd_OrderDemoList_buyer = md_OrderDemoList.Fields().ByName("buyer")
	fd_OrderDemoList_seller = md_OrderDemoList.Fields().ByName("seller")
	fd_OrderDemoList_orderDoneList = md_OrderDemoList.Fields().ByName("orderDoneList")
}

var _ protoreflect.Message = (*fastReflection_OrderDemoList)(nil)

type fastReflection_OrderDemoList OrderDemoList

func (x *OrderDemoList) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OrderDemoList)(x)
}

func (x *OrderDemoList) slowProtoReflect() protoreflect.Message {
	mi := &file_lightmos_restaking_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OrderDemoList_messageType fastReflection_OrderDemoList_messageType
var _ protoreflect.MessageType = fastReflection_OrderDemoList_messageType{}

type fastReflection_OrderDemoList_messageType struct{}

func (x fastReflection_OrderDemoList_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OrderDemoList)(nil)
}
func (x fastReflection_OrderDemoList_messageType) New() protoreflect.Message {
	return new(fastReflection_OrderDemoList)
}
func (x fastReflection_OrderDemoList_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderDemoList
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OrderDemoList) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderDemoList
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OrderDemoList) Type() protoreflect.MessageType {
	return _fastReflection_OrderDemoList_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OrderDemoList) New() protoreflect.Message {
	return new(fastReflection_OrderDemoList)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OrderDemoList) Interface() protoreflect.ProtoMessage {
	return (*OrderDemoList)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OrderDemoList) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Buyer != "" {
		value := protoreflect.ValueOfString(x.Buyer)
		if !f(fd_OrderDemoList_buyer, value) {
			return
		}
	}
	if x.Seller != "" {
		value := protoreflect.ValueOfString(x.Seller)
		if !f(fd_OrderDemoList_seller, value) {
			return
		}
	}
	if len(x.OrderDoneList) != 0 {
		value := protoreflect.ValueOfList(&_OrderDemoList_3_list{list: &x.OrderDoneList})
		if !f(fd_OrderDemoList_orderDoneList, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OrderDemoList) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDemoList.buyer":
		return x.Buyer != ""
	case "lightmos.restaking.OrderDemoList.seller":
		return x.Seller != ""
	case "lightmos.restaking.OrderDemoList.orderDoneList":
		return len(x.OrderDoneList) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDemoList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDemoList does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDemoList) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDemoList.buyer":
		x.Buyer = ""
	case "lightmos.restaking.OrderDemoList.seller":
		x.Seller = ""
	case "lightmos.restaking.OrderDemoList.orderDoneList":
		x.OrderDoneList = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDemoList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDemoList does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OrderDemoList) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "lightmos.restaking.OrderDemoList.buyer":
		value := x.Buyer
		return protoreflect.ValueOfString(value)
	case "lightmos.restaking.OrderDemoList.seller":
		value := x.Seller
		return protoreflect.ValueOfString(value)
	case "lightmos.restaking.OrderDemoList.orderDoneList":
		if len(x.OrderDoneList) == 0 {
			return protoreflect.ValueOfList(&_OrderDemoList_3_list{})
		}
		listValue := &_OrderDemoList_3_list{list: &x.OrderDoneList}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDemoList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDemoList does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDemoList) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDemoList.buyer":
		x.Buyer = value.Interface().(string)
	case "lightmos.restaking.OrderDemoList.seller":
		x.Seller = value.Interface().(string)
	case "lightmos.restaking.OrderDemoList.orderDoneList":
		lv := value.List()
		clv := lv.(*_OrderDemoList_3_list)
		x.OrderDoneList = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDemoList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDemoList does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDemoList) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDemoList.orderDoneList":
		if x.OrderDoneList == nil {
			x.OrderDoneList = []*OrderDoneList{}
		}
		value := &_OrderDemoList_3_list{list: &x.OrderDoneList}
		return protoreflect.ValueOfList(value)
	case "lightmos.restaking.OrderDemoList.buyer":
		panic(fmt.Errorf("field buyer of message lightmos.restaking.OrderDemoList is not mutable"))
	case "lightmos.restaking.OrderDemoList.seller":
		panic(fmt.Errorf("field seller of message lightmos.restaking.OrderDemoList is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDemoList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDemoList does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OrderDemoList) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDemoList.buyer":
		return protoreflect.ValueOfString("")
	case "lightmos.restaking.OrderDemoList.seller":
		return protoreflect.ValueOfString("")
	case "lightmos.restaking.OrderDemoList.orderDoneList":
		list := []*OrderDoneList{}
		return protoreflect.ValueOfList(&_OrderDemoList_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDemoList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDemoList does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OrderDemoList) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in lightmos.restaking.OrderDemoList", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OrderDemoList) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDemoList) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OrderDemoList) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OrderDemoList) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OrderDemoList)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Buyer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Seller)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.OrderDoneList) > 0 {
			for _, e := range x.OrderDoneList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OrderDemoList)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.OrderDoneList) > 0 {
			for iNdEx := len(x.OrderDoneList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OrderDoneList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Seller) > 0 {
			i -= len(x.Seller)
			copy(dAtA[i:], x.Seller)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Seller)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Buyer) > 0 {
			i -= len(x.Buyer)
			copy(dAtA[i:], x.Buyer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Buyer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OrderDemoList)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderDemoList: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderDemoList: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Buyer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Seller = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderDoneList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OrderDoneList = append(x.OrderDoneList, &OrderDoneList{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OrderDoneList[len(x.OrderDoneList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_OrderDoneList        protoreflect.MessageDescriptor
	fd_OrderDoneList_price  protoreflect.FieldDescriptor
	fd_OrderDoneList_amount protoreflect.FieldDescriptor
)

func init() {
	file_lightmos_restaking_order_proto_init()
	md_OrderDoneList = File_lightmos_restaking_order_proto.Messages().ByName("OrderDoneList")
	fd_OrderDoneList_price = md_OrderDoneList.Fields().ByName("price")
	fd_OrderDoneList_amount = md_OrderDoneList.Fields().ByName("amount")
}

var _ protoreflect.Message = (*fastReflection_OrderDoneList)(nil)

type fastReflection_OrderDoneList OrderDoneList

func (x *OrderDoneList) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OrderDoneList)(x)
}

func (x *OrderDoneList) slowProtoReflect() protoreflect.Message {
	mi := &file_lightmos_restaking_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OrderDoneList_messageType fastReflection_OrderDoneList_messageType
var _ protoreflect.MessageType = fastReflection_OrderDoneList_messageType{}

type fastReflection_OrderDoneList_messageType struct{}

func (x fastReflection_OrderDoneList_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OrderDoneList)(nil)
}
func (x fastReflection_OrderDoneList_messageType) New() protoreflect.Message {
	return new(fastReflection_OrderDoneList)
}
func (x fastReflection_OrderDoneList_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderDoneList
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OrderDoneList) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderDoneList
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OrderDoneList) Type() protoreflect.MessageType {
	return _fastReflection_OrderDoneList_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OrderDoneList) New() protoreflect.Message {
	return new(fastReflection_OrderDoneList)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OrderDoneList) Interface() protoreflect.ProtoMessage {
	return (*OrderDoneList)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OrderDoneList) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Price != int32(0) {
		value := protoreflect.ValueOfInt32(x.Price)
		if !f(fd_OrderDoneList_price, value) {
			return
		}
	}
	if x.Amount != int32(0) {
		value := protoreflect.ValueOfInt32(x.Amount)
		if !f(fd_OrderDoneList_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OrderDoneList) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneList.price":
		return x.Price != int32(0)
	case "lightmos.restaking.OrderDoneList.amount":
		return x.Amount != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneList does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDoneList) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneList.price":
		x.Price = int32(0)
	case "lightmos.restaking.OrderDoneList.amount":
		x.Amount = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneList does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OrderDoneList) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "lightmos.restaking.OrderDoneList.price":
		value := x.Price
		return protoreflect.ValueOfInt32(value)
	case "lightmos.restaking.OrderDoneList.amount":
		value := x.Amount
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneList does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDoneList) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneList.price":
		x.Price = int32(value.Int())
	case "lightmos.restaking.OrderDoneList.amount":
		x.Amount = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneList does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDoneList) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneList.price":
		panic(fmt.Errorf("field price of message lightmos.restaking.OrderDoneList is not mutable"))
	case "lightmos.restaking.OrderDoneList.amount":
		panic(fmt.Errorf("field amount of message lightmos.restaking.OrderDoneList is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneList does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OrderDoneList) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "lightmos.restaking.OrderDoneList.price":
		return protoreflect.ValueOfInt32(int32(0))
	case "lightmos.restaking.OrderDoneList.amount":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: lightmos.restaking.OrderDoneList"))
		}
		panic(fmt.Errorf("message lightmos.restaking.OrderDoneList does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OrderDoneList) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in lightmos.restaking.OrderDoneList", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OrderDoneList) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderDoneList) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OrderDoneList) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OrderDoneList) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OrderDoneList)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Price != 0 {
			n += 1 + runtime.Sov(uint64(x.Price))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OrderDoneList)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x10
		}
		if x.Price != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Price))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OrderDoneList)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderDoneList: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderDoneList: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
				}
				x.Price = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Price |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: lightmos/restaking/order.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdCount int32    `protobuf:"varint,1,opt,name=idCount,proto3" json:"idCount,omitempty"`
	Orders  []*Order `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightmos_restaking_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_lightmos_restaking_order_proto_rawDescGZIP(), []int{0}
}

func (x *OrderBook) GetIdCount() int32 {
	if x != nil {
		return x.IdCount
	}
	return 0
}

func (x *OrderBook) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Price   int32  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightmos_restaking_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_lightmos_restaking_order_proto_rawDescGZIP(), []int{1}
}

func (x *Order) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Order) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Order) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type OrderDoneHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromChainId  string             `protobuf:"bytes,1,opt,name=fromChainId,proto3" json:"fromChainId,omitempty"`
	ToChainId    string             `protobuf:"bytes,2,opt,name=toChainId,proto3" json:"toChainId,omitempty"`
	ChainHistory []*DoneChanHistory `protobuf:"bytes,3,rep,name=chainHistory,proto3" json:"chainHistory,omitempty"`
}

func (x *OrderDoneHistory) Reset() {
	*x = OrderDoneHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightmos_restaking_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDoneHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDoneHistory) ProtoMessage() {}

// Deprecated: Use OrderDoneHistory.ProtoReflect.Descriptor instead.
func (*OrderDoneHistory) Descriptor() ([]byte, []int) {
	return file_lightmos_restaking_order_proto_rawDescGZIP(), []int{2}
}

func (x *OrderDoneHistory) GetFromChainId() string {
	if x != nil {
		return x.FromChainId
	}
	return ""
}

func (x *OrderDoneHistory) GetToChainId() string {
	if x != nil {
		return x.ToChainId
	}
	return ""
}

func (x *OrderDoneHistory) GetChainHistory() []*DoneChanHistory {
	if x != nil {
		return x.ChainHistory
	}
	return nil
}

type DoneChanHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcDemo   string           `protobuf:"bytes,1,opt,name=srcDemo,proto3" json:"srcDemo,omitempty"`
	DstDemo   string           `protobuf:"bytes,2,opt,name=dstDemo,proto3" json:"dstDemo,omitempty"`
	OrderDemo []*OrderDemoList `protobuf:"bytes,3,rep,name=orderDemo,proto3" json:"orderDemo,omitempty"`
}

func (x *DoneChanHistory) Reset() {
	*x = DoneChanHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightmos_restaking_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoneChanHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoneChanHistory) ProtoMessage() {}

// Deprecated: Use DoneChanHistory.ProtoReflect.Descriptor instead.
func (*DoneChanHistory) Descriptor() ([]byte, []int) {
	return file_lightmos_restaking_order_proto_rawDescGZIP(), []int{3}
}

func (x *DoneChanHistory) GetSrcDemo() string {
	if x != nil {
		return x.SrcDemo
	}
	return ""
}

func (x *DoneChanHistory) GetDstDemo() string {
	if x != nil {
		return x.DstDemo
	}
	return ""
}

func (x *DoneChanHistory) GetOrderDemo() []*OrderDemoList {
	if x != nil {
		return x.OrderDemo
	}
	return nil
}

type OrderDemoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buyer         string           `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Seller        string           `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
	OrderDoneList []*OrderDoneList `protobuf:"bytes,3,rep,name=orderDoneList,proto3" json:"orderDoneList,omitempty"`
}

func (x *OrderDemoList) Reset() {
	*x = OrderDemoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightmos_restaking_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDemoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDemoList) ProtoMessage() {}

// Deprecated: Use OrderDemoList.ProtoReflect.Descriptor instead.
func (*OrderDemoList) Descriptor() ([]byte, []int) {
	return file_lightmos_restaking_order_proto_rawDescGZIP(), []int{4}
}

func (x *OrderDemoList) GetBuyer() string {
	if x != nil {
		return x.Buyer
	}
	return ""
}

func (x *OrderDemoList) GetSeller() string {
	if x != nil {
		return x.Seller
	}
	return ""
}

func (x *OrderDemoList) GetOrderDoneList() []*OrderDoneList {
	if x != nil {
		return x.OrderDoneList
	}
	return nil
}

type OrderDoneList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price  int32 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Amount int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *OrderDoneList) Reset() {
	*x = OrderDoneList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightmos_restaking_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDoneList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDoneList) ProtoMessage() {}

// Deprecated: Use OrderDoneList.ProtoReflect.Descriptor instead.
func (*OrderDoneList) Descriptor() ([]byte, []int) {
	return file_lightmos_restaking_order_proto_rawDescGZIP(), []int{5}
}

func (x *OrderDoneList) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderDoneList) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_lightmos_restaking_order_proto protoreflect.FileDescriptor

var file_lightmos_restaking_order_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x58, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x5f,
	0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x9b, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x86, 0x01,
	0x0a, 0x0f, 0x44, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x44, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x73, 0x74, 0x44, 0x65, 0x6d, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73,
	0x74, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x6d, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6d, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x6d, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x3d, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0xc3,
	0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6d, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0xa2, 0x02, 0x03,
	0x4c, 0x52, 0x58, 0xaa, 0x02, 0x12, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x12, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x6d, 0x6f, 0x73, 0x5c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0xe2, 0x02, 0x1e,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x5c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x13, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x73, 0x3a, 0x3a, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lightmos_restaking_order_proto_rawDescOnce sync.Once
	file_lightmos_restaking_order_proto_rawDescData = file_lightmos_restaking_order_proto_rawDesc
)

func file_lightmos_restaking_order_proto_rawDescGZIP() []byte {
	file_lightmos_restaking_order_proto_rawDescOnce.Do(func() {
		file_lightmos_restaking_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_lightmos_restaking_order_proto_rawDescData)
	})
	return file_lightmos_restaking_order_proto_rawDescData
}

var file_lightmos_restaking_order_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_lightmos_restaking_order_proto_goTypes = []interface{}{
	(*OrderBook)(nil),        // 0: lightmos.restaking.OrderBook
	(*Order)(nil),            // 1: lightmos.restaking.Order
	(*OrderDoneHistory)(nil), // 2: lightmos.restaking.OrderDoneHistory
	(*DoneChanHistory)(nil),  // 3: lightmos.restaking.DoneChanHistory
	(*OrderDemoList)(nil),    // 4: lightmos.restaking.OrderDemoList
	(*OrderDoneList)(nil),    // 5: lightmos.restaking.OrderDoneList
}
var file_lightmos_restaking_order_proto_depIdxs = []int32{
	1, // 0: lightmos.restaking.OrderBook.orders:type_name -> lightmos.restaking.Order
	3, // 1: lightmos.restaking.OrderDoneHistory.chainHistory:type_name -> lightmos.restaking.DoneChanHistory
	4, // 2: lightmos.restaking.DoneChanHistory.orderDemo:type_name -> lightmos.restaking.OrderDemoList
	5, // 3: lightmos.restaking.OrderDemoList.orderDoneList:type_name -> lightmos.restaking.OrderDoneList
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_lightmos_restaking_order_proto_init() }
func file_lightmos_restaking_order_proto_init() {
	if File_lightmos_restaking_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lightmos_restaking_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightmos_restaking_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightmos_restaking_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDoneHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightmos_restaking_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoneChanHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightmos_restaking_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDemoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightmos_restaking_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDoneList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lightmos_restaking_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lightmos_restaking_order_proto_goTypes,
		DependencyIndexes: file_lightmos_restaking_order_proto_depIdxs,
		MessageInfos:      file_lightmos_restaking_order_proto_msgTypes,
	}.Build()
	File_lightmos_restaking_order_proto = out.File
	file_lightmos_restaking_order_proto_rawDesc = nil
	file_lightmos_restaking_order_proto_goTypes = nil
	file_lightmos_restaking_order_proto_depIdxs = nil
}
