// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: lightmos/restaking/tx.proto

package restaking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_SendSellOrder_FullMethodName   = "/lightmos.restaking.Msg/SendSellOrder"
	Msg_SendBuyOrder_FullMethodName    = "/lightmos.restaking.Msg/SendBuyOrder"
	Msg_CancelSellOrder_FullMethodName = "/lightmos.restaking.Msg/CancelSellOrder"
	Msg_CancelBuyOrder_FullMethodName  = "/lightmos.restaking.Msg/CancelBuyOrder"
	Msg_CreateValidator_FullMethodName = "/lightmos.restaking.Msg/CreateValidator"
	Msg_SendRetireShare_FullMethodName = "/lightmos.restaking.Msg/SendRetireShare"
	Msg_SendUndelegate_FullMethodName  = "/lightmos.restaking.Msg/SendUndelegate"
	Msg_WithdrawToken_FullMethodName   = "/lightmos.restaking.Msg/WithdrawToken"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	SendSellOrder(ctx context.Context, in *MsgSendSellOrder, opts ...grpc.CallOption) (*MsgSendSellOrderResponse, error)
	SendBuyOrder(ctx context.Context, in *MsgSendBuyOrder, opts ...grpc.CallOption) (*MsgSendBuyOrderResponse, error)
	CancelSellOrder(ctx context.Context, in *MsgCancelSellOrder, opts ...grpc.CallOption) (*MsgCancelSellOrderResponse, error)
	CancelBuyOrder(ctx context.Context, in *MsgCancelBuyOrder, opts ...grpc.CallOption) (*MsgCancelBuyOrderResponse, error)
	CreateValidator(ctx context.Context, in *MsgCreateValidator, opts ...grpc.CallOption) (*MsgCreateValidatorResponse, error)
	SendRetireShare(ctx context.Context, in *MsgSendRetireShare, opts ...grpc.CallOption) (*MsgSendRetireShareResponse, error)
	SendUndelegate(ctx context.Context, in *MsgSendUndelegate, opts ...grpc.CallOption) (*MsgSendUndelegateResponse, error)
	WithdrawToken(ctx context.Context, in *MsgWithdrawToken, opts ...grpc.CallOption) (*MsgWithdrawTokenResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendSellOrder(ctx context.Context, in *MsgSendSellOrder, opts ...grpc.CallOption) (*MsgSendSellOrderResponse, error) {
	out := new(MsgSendSellOrderResponse)
	err := c.cc.Invoke(ctx, Msg_SendSellOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendBuyOrder(ctx context.Context, in *MsgSendBuyOrder, opts ...grpc.CallOption) (*MsgSendBuyOrderResponse, error) {
	out := new(MsgSendBuyOrderResponse)
	err := c.cc.Invoke(ctx, Msg_SendBuyOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSellOrder(ctx context.Context, in *MsgCancelSellOrder, opts ...grpc.CallOption) (*MsgCancelSellOrderResponse, error) {
	out := new(MsgCancelSellOrderResponse)
	err := c.cc.Invoke(ctx, Msg_CancelSellOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelBuyOrder(ctx context.Context, in *MsgCancelBuyOrder, opts ...grpc.CallOption) (*MsgCancelBuyOrderResponse, error) {
	out := new(MsgCancelBuyOrderResponse)
	err := c.cc.Invoke(ctx, Msg_CancelBuyOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateValidator(ctx context.Context, in *MsgCreateValidator, opts ...grpc.CallOption) (*MsgCreateValidatorResponse, error) {
	out := new(MsgCreateValidatorResponse)
	err := c.cc.Invoke(ctx, Msg_CreateValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendRetireShare(ctx context.Context, in *MsgSendRetireShare, opts ...grpc.CallOption) (*MsgSendRetireShareResponse, error) {
	out := new(MsgSendRetireShareResponse)
	err := c.cc.Invoke(ctx, Msg_SendRetireShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendUndelegate(ctx context.Context, in *MsgSendUndelegate, opts ...grpc.CallOption) (*MsgSendUndelegateResponse, error) {
	out := new(MsgSendUndelegateResponse)
	err := c.cc.Invoke(ctx, Msg_SendUndelegate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawToken(ctx context.Context, in *MsgWithdrawToken, opts ...grpc.CallOption) (*MsgWithdrawTokenResponse, error) {
	out := new(MsgWithdrawTokenResponse)
	err := c.cc.Invoke(ctx, Msg_WithdrawToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	SendSellOrder(context.Context, *MsgSendSellOrder) (*MsgSendSellOrderResponse, error)
	SendBuyOrder(context.Context, *MsgSendBuyOrder) (*MsgSendBuyOrderResponse, error)
	CancelSellOrder(context.Context, *MsgCancelSellOrder) (*MsgCancelSellOrderResponse, error)
	CancelBuyOrder(context.Context, *MsgCancelBuyOrder) (*MsgCancelBuyOrderResponse, error)
	CreateValidator(context.Context, *MsgCreateValidator) (*MsgCreateValidatorResponse, error)
	SendRetireShare(context.Context, *MsgSendRetireShare) (*MsgSendRetireShareResponse, error)
	SendUndelegate(context.Context, *MsgSendUndelegate) (*MsgSendUndelegateResponse, error)
	WithdrawToken(context.Context, *MsgWithdrawToken) (*MsgWithdrawTokenResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) SendSellOrder(context.Context, *MsgSendSellOrder) (*MsgSendSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSellOrder not implemented")
}
func (UnimplementedMsgServer) SendBuyOrder(context.Context, *MsgSendBuyOrder) (*MsgSendBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBuyOrder not implemented")
}
func (UnimplementedMsgServer) CancelSellOrder(context.Context, *MsgCancelSellOrder) (*MsgCancelSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSellOrder not implemented")
}
func (UnimplementedMsgServer) CancelBuyOrder(context.Context, *MsgCancelBuyOrder) (*MsgCancelBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBuyOrder not implemented")
}
func (UnimplementedMsgServer) CreateValidator(context.Context, *MsgCreateValidator) (*MsgCreateValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidator not implemented")
}
func (UnimplementedMsgServer) SendRetireShare(context.Context, *MsgSendRetireShare) (*MsgSendRetireShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRetireShare not implemented")
}
func (UnimplementedMsgServer) SendUndelegate(context.Context, *MsgSendUndelegate) (*MsgSendUndelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUndelegate not implemented")
}
func (UnimplementedMsgServer) WithdrawToken(context.Context, *MsgWithdrawToken) (*MsgWithdrawTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawToken not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_SendSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendSellOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendSellOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendSellOrder(ctx, req.(*MsgSendSellOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendBuyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendBuyOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendBuyOrder(ctx, req.(*MsgSendBuyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSellOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CancelSellOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSellOrder(ctx, req.(*MsgCancelSellOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelBuyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CancelBuyOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelBuyOrder(ctx, req.(*MsgCancelBuyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateValidator(ctx, req.(*MsgCreateValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendRetireShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendRetireShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendRetireShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendRetireShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendRetireShare(ctx, req.(*MsgSendRetireShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendUndelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendUndelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendUndelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendUndelegate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendUndelegate(ctx, req.(*MsgSendUndelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_WithdrawToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawToken(ctx, req.(*MsgWithdrawToken))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lightmos.restaking.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSellOrder",
			Handler:    _Msg_SendSellOrder_Handler,
		},
		{
			MethodName: "SendBuyOrder",
			Handler:    _Msg_SendBuyOrder_Handler,
		},
		{
			MethodName: "CancelSellOrder",
			Handler:    _Msg_CancelSellOrder_Handler,
		},
		{
			MethodName: "CancelBuyOrder",
			Handler:    _Msg_CancelBuyOrder_Handler,
		},
		{
			MethodName: "CreateValidator",
			Handler:    _Msg_CreateValidator_Handler,
		},
		{
			MethodName: "SendRetireShare",
			Handler:    _Msg_SendRetireShare_Handler,
		},
		{
			MethodName: "SendUndelegate",
			Handler:    _Msg_SendUndelegate_Handler,
		},
		{
			MethodName: "WithdrawToken",
			Handler:    _Msg_WithdrawToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lightmos/restaking/tx.proto",
}
